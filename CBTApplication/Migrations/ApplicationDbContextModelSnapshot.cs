// <auto-generated />
using System;
using CBTApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CBTApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CBTApplication.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseName = "CBT-101",
                            DepartmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseName = "Data Structures",
                            DepartmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseName = "Circuit Analysis",
                            DepartmentId = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseName = "Digital Electronics",
                            DepartmentId = 2
                        },
                        new
                        {
                            Id = 5,
                            CourseName = "Business Fundamentals",
                            DepartmentId = 3
                        },
                        new
                        {
                            Id = 6,
                            CourseName = "Marketing Principles",
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Computer Science"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Electrical Engineering"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentName = "Business Administration"
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.PasswordResetRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetRequests");
                });

            modelBuilder.Entity("CBTApplication.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectOption = "A",
                            OptionA = "Central Processing Unit",
                            OptionB = "Computer Processing Unit",
                            OptionC = "Central Program Utility",
                            OptionD = "Computer Program Unit",
                            QuestionBankId = 1,
                            QuestionNumber = 1,
                            QuestionText = "What does CPU stand for?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectOption = "D",
                            OptionA = "C",
                            OptionB = "Java",
                            OptionC = "Assembly",
                            OptionD = "Fortran",
                            QuestionBankId = 1,
                            QuestionNumber = 2,
                            QuestionText = "Which programming language is known as the 'mother of all languages'?"
                        },
                        new
                        {
                            Id = 3,
                            CorrectOption = "B",
                            OptionA = "Queue",
                            OptionB = "Stack",
                            OptionC = "Linked List",
                            OptionD = "Tree",
                            QuestionBankId = 1,
                            QuestionNumber = 3,
                            QuestionText = "What data structure uses LIFO (Last In, First Out) principle?"
                        },
                        new
                        {
                            Id = 4,
                            CorrectOption = "D",
                            OptionA = "Object-Oriented",
                            OptionB = "Functional",
                            OptionC = "Procedural",
                            OptionD = "Circular",
                            QuestionBankId = 1,
                            QuestionNumber = 4,
                            QuestionText = "Which of these is not a programming paradigm?"
                        },
                        new
                        {
                            Id = 5,
                            CorrectOption = "A",
                            OptionA = "HyperText Markup Language",
                            OptionB = "HighText Machine Language",
                            OptionC = "HyperTabular Markup Language",
                            OptionD = "None of these",
                            QuestionBankId = 1,
                            QuestionNumber = 5,
                            QuestionText = "What does HTML stand for?"
                        },
                        new
                        {
                            Id = 6,
                            CorrectOption = "C",
                            OptionA = "Volt",
                            OptionB = "Ampere",
                            OptionC = "Ohm",
                            OptionD = "Watt",
                            QuestionBankId = 2,
                            QuestionNumber = 1,
                            QuestionText = "What is the unit of electrical resistance?"
                        },
                        new
                        {
                            Id = 7,
                            CorrectOption = "B",
                            OptionA = "Faraday's Law",
                            OptionB = "Ohm's Law",
                            OptionC = "Kirchhoff's Law",
                            OptionD = "Coulomb's Law",
                            QuestionBankId = 2,
                            QuestionNumber = 2,
                            QuestionText = "Which law states that the current through a conductor is proportional to the voltage?"
                        },
                        new
                        {
                            Id = 8,
                            CorrectOption = "A",
                            OptionA = "Alternating Current",
                            OptionB = "Active Current",
                            OptionC = "Ampere Current",
                            OptionD = "Absolute Current",
                            QuestionBankId = 2,
                            QuestionNumber = 3,
                            QuestionText = "What does AC stand for in electrical engineering?"
                        },
                        new
                        {
                            Id = 9,
                            CorrectOption = "D",
                            OptionA = "Resistor",
                            OptionB = "Inductor",
                            OptionC = "Transistor",
                            OptionD = "Capacitor",
                            QuestionBankId = 2,
                            QuestionNumber = 4,
                            QuestionText = "Which component stores electrical energy in an electric field?"
                        },
                        new
                        {
                            Id = 10,
                            CorrectOption = "B",
                            OptionA = "Ohm",
                            OptionB = "Siemens",
                            OptionC = "Henry",
                            OptionD = "Farad",
                            QuestionBankId = 2,
                            QuestionNumber = 5,
                            QuestionText = "What is the SI unit of electrical conductance?"
                        },
                        new
                        {
                            Id = 11,
                            CorrectOption = "A",
                            OptionA = "Strengths, Weaknesses, Opportunities, Threats",
                            OptionB = "Sales, Workforce, Operations, Technology",
                            OptionC = "Strategy, Workflow, Organization, Tactics",
                            OptionD = "None of these",
                            QuestionBankId = 3,
                            QuestionNumber = 1,
                            QuestionText = "What does SWOT stand for in business analysis?"
                        },
                        new
                        {
                            Id = 12,
                            CorrectOption = "D",
                            OptionA = "Sole Proprietorship",
                            OptionB = "Partnership",
                            OptionC = "Corporation",
                            OptionD = "Individualism",
                            QuestionBankId = 3,
                            QuestionNumber = 2,
                            QuestionText = "Which of the following is not a type of business organization?"
                        },
                        new
                        {
                            Id = 13,
                            CorrectOption = "B",
                            OptionA = "Social Welfare",
                            OptionB = "Profit Maximization",
                            OptionC = "Employee Satisfaction",
                            OptionD = "Customer Delight",
                            QuestionBankId = 3,
                            QuestionNumber = 3,
                            QuestionText = "What is the primary goal of a business?"
                        },
                        new
                        {
                            Id = 14,
                            CorrectOption = "C",
                            OptionA = "Organizing",
                            OptionB = "Leading",
                            OptionC = "Planning",
                            OptionD = "Controlling",
                            QuestionBankId = 3,
                            QuestionNumber = 4,
                            QuestionText = "Which management function involves setting objectives and determining a course of action?"
                        },
                        new
                        {
                            Id = 15,
                            CorrectOption = "A",
                            OptionA = "Return on Investment",
                            OptionB = "Rate of Interest",
                            OptionC = "Return on Income",
                            OptionD = "Rate of Inflation",
                            QuestionBankId = 3,
                            QuestionNumber = 5,
                            QuestionText = "What does ROI stand for in business?"
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("QuestionBanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Computer Science Fundamentals"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Electrical Engineering Basics"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Business Administration Essentials"
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.QuestionOrderNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("TestAttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestAttemptId");

                    b.ToTable("QuestionOrderNumber");
                });

            modelBuilder.Entity("CBTApplication.Models.StudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("TestAttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestAttemptId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("CBTApplication.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentQuestionIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentQuestionIndex = 0,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 45,
                            IsActive = true,
                            NumberOfQuestions = 5,
                            QuestionBankId = 1,
                            TestName = "Computer Science Fundamentals Test"
                        },
                        new
                        {
                            Id = 2,
                            CurrentQuestionIndex = 0,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 45,
                            IsActive = true,
                            NumberOfQuestions = 5,
                            QuestionBankId = 2,
                            TestName = "Electrical Engineering Basics Test"
                        },
                        new
                        {
                            Id = 3,
                            CurrentQuestionIndex = 0,
                            DateCreated = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 45,
                            IsActive = true,
                            NumberOfQuestions = 5,
                            QuestionBankId = 3,
                            TestName = "Business Administration Essentials Test"
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.TestAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentQuestionIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("DateAttempted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestAttempts");
                });

            modelBuilder.Entity("CBTApplication.Models.TestDepartment", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("TestId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TestDepartments");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            DepartmentId = 1
                        },
                        new
                        {
                            TestId = 2,
                            DepartmentId = 2
                        },
                        new
                        {
                            TestId = 3,
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            DepartmentId = 1,
                            Email = "daniel@gmail.com",
                            Gender = "Male",
                            Level = "N/A",
                            Name = "Daniel Ezinna",
                            PasswordHash = "$2a$11$y8HJdlnpn0MoWczzU1E5SeVRPFIp9TyAYefFHyrTw8dvIZMEvrlM2",
                            PhoneNumber = "08011110001",
                            Role = "Admin",
                            UniqueId = "ADM002"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            DepartmentId = 1,
                            Email = "yamal@gmail.com",
                            Gender = "Male",
                            Level = "300",
                            Name = "Yamal",
                            PasswordHash = "$2a$11$eziRJeLZaPDFpn7xiYBXo.M58tOlzaomNDpI5ImdKppRAvbE.kkMu",
                            PhoneNumber = "08033483201",
                            Role = "User",
                            UniqueId = "2312938422"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            DepartmentId = 2,
                            Email = "alice@example.com",
                            Gender = "Female",
                            Level = "200",
                            Name = "Alice Smith",
                            PasswordHash = "$2a$11$eziRJeLZaPDFpn7xiYBXo.M58tOlzaomNDpI5ImdKppRAvbE.kkMu",
                            PhoneNumber = "08012345678",
                            Role = "User",
                            UniqueId = "2312938423"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 5,
                            DepartmentId = 3,
                            Email = "bob@example.com",
                            Gender = "Male",
                            Level = "400",
                            Name = "Bob Johnson",
                            PasswordHash = "$2a$11$eziRJeLZaPDFpn7xiYBXo.M58tOlzaomNDpI5ImdKppRAvbE.kkMu",
                            PhoneNumber = "08087654321",
                            Role = "User",
                            UniqueId = "2312938424"
                        });
                });

            modelBuilder.Entity("CBTApplication.Models.Course", b =>
                {
                    b.HasOne("CBTApplication.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CBTApplication.Models.Question", b =>
                {
                    b.HasOne("CBTApplication.Models.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("CBTApplication.Models.QuestionOrderNumber", b =>
                {
                    b.HasOne("CBTApplication.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBTApplication.Models.TestAttempt", "TestAttempt")
                        .WithMany("QuestionOrderNumbers")
                        .HasForeignKey("TestAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TestAttempt");
                });

            modelBuilder.Entity("CBTApplication.Models.StudentAnswer", b =>
                {
                    b.HasOne("CBTApplication.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CBTApplication.Models.TestAttempt", "TestAttempt")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("TestAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TestAttempt");
                });

            modelBuilder.Entity("CBTApplication.Models.Test", b =>
                {
                    b.HasOne("CBTApplication.Models.Course", null)
                        .WithMany("Tests")
                        .HasForeignKey("CourseId");

                    b.HasOne("CBTApplication.Models.QuestionBank", "QuestionBank")
                        .WithMany("Tests")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("CBTApplication.Models.TestAttempt", b =>
                {
                    b.HasOne("CBTApplication.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CBTApplication.Models.Test", "Test")
                        .WithMany("TestAttempts")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBTApplication.Models.User", "User")
                        .WithMany("TestAttempts")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CBTApplication.Models.TestDepartment", b =>
                {
                    b.HasOne("CBTApplication.Models.Department", "Department")
                        .WithMany("TestDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBTApplication.Models.Test", "Test")
                        .WithMany("TestDepartments")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CBTApplication.Models.User", b =>
                {
                    b.HasOne("CBTApplication.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CBTApplication.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CBTApplication.Models.Course", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("CBTApplication.Models.Department", b =>
                {
                    b.Navigation("TestDepartments");
                });

            modelBuilder.Entity("CBTApplication.Models.QuestionBank", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("CBTApplication.Models.Test", b =>
                {
                    b.Navigation("TestAttempts");

                    b.Navigation("TestDepartments");
                });

            modelBuilder.Entity("CBTApplication.Models.TestAttempt", b =>
                {
                    b.Navigation("QuestionOrderNumbers");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("CBTApplication.Models.User", b =>
                {
                    b.Navigation("TestAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
